package algosim;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.font.TextAttribute;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
/**
 *
 * @author veivesh
 */
public class SimulatorForm extends javax.swing.JFrame {

    javax.swing.JTextField x[] = new javax.swing.JTextField[10];
    JLabel in[] = new JLabel[10];
    Thread[] arr;

    public SimulatorForm() {
        initComponents();
        
        Font font = jLabel2.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        jLabel2.setFont(font.deriveFont(attributes));

        Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension windowsize = getSize();
        this.setBounds((screensize.width - windowsize.width) / 2, (screensize.height - 
                windowsize.height) / 2, windowsize.width, windowsize.height);

        x[0] = txt1;
        x[1] = txt2;
        x[2] = txt3;
        x[3] = txt4;
        x[4] = txt5;
        x[5] = txt6;
        x[6] = txt7;
        x[7] = txt8;
        x[8] = txt9;
        x[9] = txt10;

        in[0] = in0;
        in[1] = in1;
        in[2] = in2;
        in[3] = in3;
        in[4] = in4;
        in[5] = in5;
        in[6] = in6;
        in[7] = in7;
        in[8] = in8;
        in[9] = in9;

        for (int i = 0; i < in.length; i++) {
            in[i].setBackground(Color.WHITE);
        }

        clear();
        loadRandom();

        for (int i = 0; i < 10; i++) {
            x[i].setEditable(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt1 = new javax.swing.JTextField();
        txt2 = new javax.swing.JTextField();
        txt3 = new javax.swing.JTextField();
        txt4 = new javax.swing.JTextField();
        txt5 = new javax.swing.JTextField();
        txt9 = new javax.swing.JTextField();
        txt10 = new javax.swing.JTextField();
        txt8 = new javax.swing.JTextField();
        txt7 = new javax.swing.JTextField();
        txt6 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        in0 = new javax.swing.JLabel();
        in1 = new javax.swing.JLabel();
        in2 = new javax.swing.JLabel();
        in3 = new javax.swing.JLabel();
        in4 = new javax.swing.JLabel();
        in5 = new javax.swing.JLabel();
        in6 = new javax.swing.JLabel();
        in7 = new javax.swing.JLabel();
        in8 = new javax.swing.JLabel();
        in9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        rbBubble = new javax.swing.JRadioButton();
        rbSelection = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        rdAsc = new javax.swing.JRadioButton();
        rdDesc = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        lblInitArrTag = new javax.swing.JLabel();
        lblNearlySortTag = new javax.swing.JLabel();
        lblInitArray = new javax.swing.JLabel();
        lblCurrArray = new javax.swing.JLabel();
        lblResulttag = new javax.swing.JLabel();
        lblSortArray = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCustom = new javax.swing.JButton();
        btnRandom = new javax.swing.JButton();
        btnSort = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Algorithm Simulator");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Select Algorithm :");

        in0.setText(" 0");
        in0.setOpaque(true);

        in1.setText(" 1");
        in1.setOpaque(true);

        in2.setText(" 2");
        in2.setOpaque(true);

        in3.setText(" 3");
        in3.setOpaque(true);

        in4.setText(" 4");
        in4.setOpaque(true);

        in5.setText(" 5");
        in5.setOpaque(true);

        in6.setText(" 6");
        in6.setOpaque(true);

        in7.setText(" 7");
        in7.setOpaque(true);

        in8.setText(" 8");
        in8.setOpaque(true);

        in9.setText(" 9");
        in9.setOpaque(true);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        rbBubble.setText("Bubble Sort");
        rbBubble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBubbleActionPerformed(evt);
            }
        });

        rbSelection.setText("Selection Sort");
        rbSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSelectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbSelection, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(rbBubble, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbBubble)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbSelection)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        rdAsc.setText("Ascending Order");
        rdAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdAscActionPerformed(evt);
            }
        });

        rdDesc.setText("Descending Order");
        rdDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdDescActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdDesc)
                    .addComponent(rdAsc))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdAsc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdDesc)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in0, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(1, 1, 1))
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txt9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt10, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(in9, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(in0)
                            .addComponent(in1)
                            .addComponent(in2)
                            .addComponent(in3)
                            .addComponent(in4)
                            .addComponent(in5)
                            .addComponent(in6)
                            .addComponent(in7)
                            .addComponent(in8)
                            .addComponent(in9))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblInitArrTag.setText("Initial Array");

        lblNearlySortTag.setText("Current Array");

        lblInitArray.setText("-");

        lblCurrArray.setText("-");

        lblResulttag.setText("Sorted Array / Result");

        lblSortArray.setText("-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNearlySortTag)
                    .addComponent(lblResulttag)
                    .addComponent(lblInitArrTag))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblInitArray, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblSortArray, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                            .addComponent(lblCurrArray, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInitArrTag)
                    .addComponent(lblInitArray))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNearlySortTag)
                    .addComponent(lblCurrArray))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResulttag)
                    .addComponent(lblSortArray))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("About");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        btnCustom.setText("Clear");
        btnCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomActionPerformed(evt);
            }
        });

        btnRandom.setText("Random Values");
        btnRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomActionPerformed(evt);
            }
        });

        btnSort.setText("Sort");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRandom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCustom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jLabel2))
                    .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCustom)
                        .addGap(11, 11, 11)
                        .addComponent(btnRandom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSort)
                        .addGap(30, 30, 30)
                        .addComponent(btnReset))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        // TODO add your handling code here:
        clearColor();
        if (validateInput()) {
            if (rbBubble.isSelected()) {
                if (rdAsc.isSelected()) {
                    BubbleSort();
                }
                else if (rdDesc.isSelected()) {
                    BubbleSortDes();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Please select an ordering method.", "Error", JOptionPane.OK_OPTION);
                }
            } 
            else if (rbSelection.isSelected()) {
                if (rdAsc.isSelected()) {
                    SelectionSort();
                }
                else if (rdDesc.isSelected()) {
                    SelectionSortDes();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Please select an ordering method.", "Error", JOptionPane.OK_OPTION);
                }
            } 
            else {
                JOptionPane.showMessageDialog(null, "Please select a sorting algorithm", "Error", JOptionPane.OK_OPTION);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Error Occured. Please input 10 integers. Try Again", "Error", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnSortActionPerformed

    private void btnRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomActionPerformed
        clearColor();
        clearLabels();
        loadRandom();
        for (int i = 0; i < 10; i++) {
            x[i].setEditable(false);
        }
    }//GEN-LAST:event_btnRandomActionPerformed

    private void btnCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomActionPerformed
        clear();
        clearColor();
        for (int i = 0; i < 10; i++) {
            x[i].setEditable(true);
        }
        txt1.requestFocus();
    }//GEN-LAST:event_btnCustomActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        about ab = new about();
        ab.setVisible(true);
        
    }//GEN-LAST:event_jLabel2MouseClicked

    private void rbBubbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBubbleActionPerformed
        if (rbBubble.isSelected()) {
            rbSelection.setSelected(false);
        }
    }//GEN-LAST:event_rbBubbleActionPerformed

    private void rbSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSelectionActionPerformed
        if (rbSelection.isSelected()) {
            rbBubble.setSelected(false);
        }    }//GEN-LAST:event_rbSelectionActionPerformed

    private void rdAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdAscActionPerformed
        if (rdAsc.isSelected()) {
                    rdDesc.setSelected(false);
        }
    }//GEN-LAST:event_rdAscActionPerformed

    private void rdDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdDescActionPerformed
        if (rdDesc.isSelected()) {
                    rdAsc.setSelected(false);
        }
    }//GEN-LAST:event_rdDescActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        SimulatorForm sim = new SimulatorForm();
        sim.setVisible(true);     
        this.dispose();
    }//GEN-LAST:event_btnResetActionPerformed

  
    public void BubbleSort() {

        Thread th = new Thread(new Runnable() {

            @Override
            public void run() {
                clearLabels();
                interactOff();
                displayArray(lblInitArray);
                displayArray(lblCurrArray);

                String temp;

                for (int pass = 1; pass < x.length; pass++) {

                    for (int i = 0; i < x.length - pass; i++) {

                        sleepThread(500);
                        in[i].setBackground(Color.PINK);

                        x[i].setBackground(Color.cyan);
                        x[i + 1].setBackground(Color.cyan);

                        sleepThread(500);

                        if (Integer.parseInt(x[i].getText()) > Integer.parseInt(x[i + 1].getText())) {

                            x[i].setBackground(Color.red);
                            x[i + 1].setBackground(Color.red);

                            sleepThread(1000);

                            temp = x[i].getText();
                            x[i].setText(x[i + 1].getText());
                            x[i + 1].setText(temp);

                            x[i].setBackground(Color.green);
                            x[i + 1].setBackground(Color.green);

                        } else {
                            x[i].setBackground(Color.green);
                            x[i + 1].setBackground(Color.green);

                        }

                        sleepThread(1000);

                        x[i].setBackground(Color.white);
                        x[i + 1].setBackground(Color.white);

                    }

                    displayArray(lblCurrArray);

                    for (int i = 0; i < x.length; i++) {
                        in[i].setBackground(Color.white);
                    }

                    for (int i = 0; i < pass; i++) {
                        x[x.length - 1 - i].setBackground(Color.LIGHT_GRAY);
                        in[in.length - 1 - i].setBackground(Color.LIGHT_GRAY);
                    }
                }

                giveColor();
                lblCurrArray.setText(" - ");
                displayArray(lblSortArray);
                JOptionPane.showMessageDialog(null, "Array Sorted!", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                interactOn();
            }

        });

        th.start();

    }   //Bubble Sorting for ascending order
    
    public void BubbleSortDes() {

        Thread th = new Thread(new Runnable() {

            @Override
            public void run() {
                clearLabels();
                interactOff();
                displayArray(lblInitArray);
                displayArray(lblCurrArray);

                String temp;

                for (int pass = 1; pass < x.length; pass++) {

                    for (int i = 0; i < x.length - pass; i++) {

                        sleepThread(500);
                        in[i].setBackground(Color.PINK);

                        x[i].setBackground(Color.cyan);
                        x[i + 1].setBackground(Color.cyan);

                        sleepThread(500);

                        if (Integer.parseInt(x[i].getText()) < Integer.parseInt(x[i + 1].getText())) {

                            x[i].setBackground(Color.red);
                            x[i + 1].setBackground(Color.red);

                            sleepThread(1000);

                            temp = x[i].getText();
                            x[i].setText(x[i + 1].getText());
                            x[i + 1].setText(temp);

                            x[i].setBackground(Color.green);
                            x[i + 1].setBackground(Color.green);

                        } else {
                            x[i].setBackground(Color.green);
                            x[i + 1].setBackground(Color.green);

                        }

                        sleepThread(1000);

                        x[i].setBackground(Color.white);
                        x[i + 1].setBackground(Color.white);

                    }

                    displayArray(lblCurrArray);

                    for (int i = 0; i < x.length; i++) {
                        in[i].setBackground(Color.white);
                    }

                    for (int i = 0; i < pass; i++) {
                        x[x.length - 1 - i].setBackground(Color.LIGHT_GRAY);
                        in[in.length - 1 - i].setBackground(Color.LIGHT_GRAY);
                    }

                }

                giveColor();
                lblCurrArray.setText(" - ");
                displayArray(lblSortArray);
                JOptionPane.showMessageDialog(null, "Array Sorted!", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                interactOn();
            }

        });

        th.start();

    } //Bubble sorting for Descending order

    public void SelectionSortDes() {

        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                clearLabels();
                displayArray(lblInitArray);
                displayArray(lblCurrArray);
                interactOff();

                int min;

                for (int step = 1; step < x.length; step++) {

                    min = step - 1;
                    in[min].setBackground(Color.PINK);

                    for (int j = step; j < x.length; j++) {
                        sleepThread(1000);

                        in[j].setBackground(Color.YELLOW);

                        if (Integer.parseInt(x[min].getText()) < Integer.parseInt(x[j].getText())) {
                            x[min].setBackground(Color.WHITE);
                            min = j;
                            x[min].setBackground(Color.cyan);
                        } else {
                            x[min].setBackground(Color.cyan);
                        }
                    }

                    int res = Integer.parseInt(x[step - 1].getText());
                    sleepThread(1000);
                    x[step - 1].setText(x[min].getText());
                    x[step - 1].setBackground(Color.cyan);
                    x[min].setText(Integer.toString(res));
                    x[min].setBackground(Color.white);

                    sleepThread(1000);
                    clearColor();

                    for (int i = 0; i <= step - 1; i++) {
                        x[i].setBackground(Color.LIGHT_GRAY);
                        in[i].setBackground(Color.LIGHT_GRAY);
                    }

                    for (int i = 9; i > step - 1; i--) {
                        in[i].setBackground(Color.white);
                    }

                    displayArray(lblCurrArray);
                }
                
                giveColor();

                JOptionPane.showMessageDialog(null, "Array Sorted!", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                displayArray(lblSortArray);
                lblCurrArray.setText(" - ");
                interactOn();

            }
        });

        t.start();
    }   //Selection Sorting for ascending order

    public void SelectionSort() {

        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                clearLabels();
                displayArray(lblInitArray);
                displayArray(lblCurrArray);
                interactOff();

                int min;

                for (int step = 1; step < x.length; step++) {

                    min = step - 1;
                    in[min].setBackground(Color.PINK);

                    for (int j = step; j < x.length; j++) {
                        sleepThread(1000);

                        in[j].setBackground(Color.YELLOW);

                        if (Integer.parseInt(x[min].getText()) > Integer.parseInt(x[j].getText())) {
                            x[min].setBackground(Color.WHITE);
                            min = j;
                            x[min].setBackground(Color.cyan);
                        } else {
                            x[min].setBackground(Color.cyan);
                        }
                    }

                    int res = Integer.parseInt(x[step - 1].getText());
                    sleepThread(1000);
                    x[step - 1].setText(x[min].getText());
                    x[step - 1].setBackground(Color.cyan);
                    x[min].setText(Integer.toString(res));
                    x[min].setBackground(Color.white);

                    sleepThread(1000);
                    clearColor();

                    for (int i = 0; i <= step - 1; i++) {
                        x[i].setBackground(Color.LIGHT_GRAY);
                        in[i].setBackground(Color.LIGHT_GRAY);
                    }

                    for (int i = 9; i > step - 1; i--) {
                        in[i].setBackground(Color.white);
                    }

                    displayArray(lblCurrArray);
                }
                
                giveColor();

                JOptionPane.showMessageDialog(null, "Array Sorted!", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                displayArray(lblSortArray);
                lblCurrArray.setText(" - ");
                interactOn();

            }
        });

        t.start();
    }   //Selection sorting for descending odrer
    
    public void sleepThread(int n) {
        try {
            Thread.sleep(n);
        } catch (InterruptedException ex) {
            Logger.getLogger(SimulatorForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void displayArray(JLabel j) {
        String arr = "";

        for (int i = 0; i < x.length; i++) {
            arr = arr.concat(x[i].getText());
            if (i != x.length - 1) {
                arr = arr.concat(" , ");
            }
        }
        j.setText(arr);
    }

    public void interactOff() {
        for (int i = 0; i < 10; i++) {
            x[i].setEditable(false);
        }
        btnSort.setEnabled(false);
        btnRandom.setEnabled(false);
        btnCustom.setEnabled(false);
        rbBubble.setEnabled(false);
        rbSelection.setEnabled(false);
        rdAsc.setEnabled(false);
        rdDesc.setEnabled(false);
    }

    public void interactOn() {
        for (int i = 0; i < 10; i++) {
            x[i].setEditable(false);
        }
        btnSort.setEnabled(true);
        btnRandom.setEnabled(true);
        btnCustom.setEnabled(true);
        rbBubble.setEnabled(true);
        rbSelection.setEnabled(true);
        rdAsc.setEnabled(true);
        rdDesc.setEnabled(true);
    }

    public void giveColor() {
        for (int i = 0; i < 10; i++) {
            x[i].setBackground(Color.green);
            in[i].setBackground(Color.WHITE);
        }
    }
    
    public void clearColor(){
        for (int i = 0; i < 10; i++) {
            x[i].setBackground(Color.white);
        }
    }
    
    public void clearLabels(){
        lblInitArray.setText(" - ");
        lblCurrArray.setText(" - ");
        lblSortArray.setText(" - ");
    }
    
    public void clear(){
        clearLabels();
        
        for (int i = 0; i < x.length ; i++) {
            x[i].setText("");
        }
    }
    
    public void loadRandom() {
        for (int i = 0; i < 10; i++) {
            x[i].setText(Integer.toString((int) (100 * Math.random())));
        }
    }

    private boolean isNumber(String x) {
        try {
            int num = Integer.parseInt(x);
            return true;

        } catch (Exception e) {
            return false;
        }
    }
    
    public boolean validateInput() {
        if (txt1.getText().equals("")
                || txt2.getText().equals("")
                || txt3.getText().equals("")
                || txt4.getText().equals("")
                || txt5.getText().equals("")
                || txt6.getText().equals("")
                || txt7.getText().equals("")
                || txt8.getText().equals("")
                || txt9.getText().equals("")
                || txt10.getText().equals("")) {

            return false;
        } else {
            for (int i = 0; i < x.length; i++) {
                if (!isNumber(x[i].getText())) {
                    return false;
                }
            }
            return true;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulatorForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCustom;
    private javax.swing.JButton btnRandom;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSort;
    private javax.swing.JLabel in0;
    private javax.swing.JLabel in1;
    private javax.swing.JLabel in2;
    private javax.swing.JLabel in3;
    private javax.swing.JLabel in4;
    private javax.swing.JLabel in5;
    private javax.swing.JLabel in6;
    private javax.swing.JLabel in7;
    private javax.swing.JLabel in8;
    private javax.swing.JLabel in9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblCurrArray;
    private javax.swing.JLabel lblInitArrTag;
    private javax.swing.JLabel lblInitArray;
    private javax.swing.JLabel lblNearlySortTag;
    private javax.swing.JLabel lblResulttag;
    private javax.swing.JLabel lblSortArray;
    private javax.swing.JRadioButton rbBubble;
    private javax.swing.JRadioButton rbSelection;
    private javax.swing.JRadioButton rdAsc;
    private javax.swing.JRadioButton rdDesc;
    private javax.swing.JTextField txt1;
    private javax.swing.JTextField txt10;
    private javax.swing.JTextField txt2;
    private javax.swing.JTextField txt3;
    private javax.swing.JTextField txt4;
    private javax.swing.JTextField txt5;
    private javax.swing.JTextField txt6;
    private javax.swing.JTextField txt7;
    private javax.swing.JTextField txt8;
    private javax.swing.JTextField txt9;
    // End of variables declaration//GEN-END:variables
}